#!/usr/bin/perl -w
#
#   beancounter --- A stock portfolio performance monitoring tool
#  
#   Copyright (C) 1998, 1999, 2000  Dirk Eddelbuettel <edd@debian.org>
#  
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#  
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#   $Id: beancounter,v 1.12 2000/12/02 23:17:32 edd Exp edd $

# adjust @INC to let the current development version be found first
BEGIN { @INC = ( ".", @INC ) }

use strict;			# be careful out there, son
use Carp;			# better error messages
use Data::Dumper;		# debug/dump data structures
use Date::Manip;		# general date parsing / calcs
use English;			# explicit variable names
use Getopt::Long;		# long options
use vars qw($help $debug $verbose $fxarg $datearg $prevdatearg 
	    $rcfilearg $sqlrestriction $extrafx);

use Finance::BeanCounter;	# beancounter functions

my $version = "0.2.0";		# updated from the debian/rules Makefile
my $date =			# inner expression below is updated by RCS
  sprintf("%s", q$Date: 2000/12/02 23:17:32 $ =~ /\w*: (\d*\/\d*\/\d*)/);

my $rcfile = $ENV{HOME} . "/.beancounterrc";

($prevdatearg, $datearg) = ("yesterday", "today");

my %options = ("help" 		=> \$help,
	       "debug"		=> \$debug,
	       "currency=s"	=> \$fxarg,
	       "date=s"		=> \$datearg,
	       "prevdate=s"	=> \$prevdatearg,
	       "restriction=s"	=> \$sqlrestriction,
	       "extrafx=s"	=> \$extrafx,
	       "rcfile=s"	=> \$rcfile,
	       "verbose"	=> \$verbose);

help_and_exit() if (!GetOptions(%options) or $help or $#ARGV < 0);
$OUTPUT_AUTOFLUSH = 1;

my %Config = GetConfig($rcfile, $debug, $verbose, $fxarg, $extrafx);
my $dbh = ConnectToDb(); 

my $command = shift @ARGV;
if ($command =~ /^plreport$/) {
  portfolio_report($sqlrestriction);
} elsif ($command =~ /^backpopulate$/) {
  backpopulate(@ARGV);
} elsif ($command =~ /^addindex$/) {
  add_index(@ARGV);
} elsif ($command =~ /^addstock$/) {
  add_stock(@ARGV);
} elsif ($command =~ /^addportfolio$/) {
  add_portfolio(@ARGV);
} elsif ($command =~ /^dayendreport$/) {
  day_end_report($sqlrestriction);
} elsif ($command =~ /^dailyjob$/) {
  portfolio_update($sqlrestriction);
  day_end_report($sqlrestriction);
} elsif ($command =~ /^delete$/) {
  delete_stock(@ARGV);
} elsif ($command =~ /^destroydb$/) {
  deletedb(@ARGV);
} elsif ($command =~ /^quote$/) {
  quote(@ARGV);
} elsif ($command =~ /^status$/) {
  portfolio_status($sqlrestriction);
} elsif ($command =~ /^update$/) {
  portfolio_update($sqlrestriction);
} elsif ($command =~ /^warranty$/) {
  warranty();
} else {
  carp "Ignoring unknown command '$command'";
}

CloseDB($dbh);

exit 0;

# ---------------------- local functions ------------------------------------

sub help_and_exit {
  my $BeanCounterVersion = BeanCounterVersion;
  print STDERR "
beancounter -- A stock portfolio performance monitoring tool

beancounter version $version ($BeanCounterVersion) of $date
Copyright (C) 1998, 1999, 2000 by Dirk Eddelbuettel <edd\@debian.org>
beancounter comes with ABSOLUTELY NO WARRANTY. This is free software, 
and you are welcome to redistribute it under certain conditions. 
Please try '$PROGRAM_NAME warranty' for more details, or visit the
website at   http://www.gnu.org/philosophy/free-sw.html 

Usage:
    beancounter [options] command [args]

Commands:
    addindex index symbol1 [symbol2 [...]]	        
				add stock(s) to market index 'index' 
    addportfolio symbol:nb:fx[:type:owner:date:price] [...]	
                                add n stock of s in currency fx to portfolio
				optional type, owner, purchase date and
                                price info can also be given (see example)
    addstock symbol ...		add stock(s) to database 
    backpopulate  symbol ...	fill with historic data for given stock(s)
    dailyjob			combines 'update' and 'dayendreport' 
    dayendreport		reports changes relative to the previous day
    deletestock arg ...		delete stock(s) from database
    destroydb			delete the BeanCounter database
    plreport			run an end-of-day portfolio report
    quote arg ...		report current data for given stock(s)
    status			status report for a given date
    update			update the database with current day's data
    warranty			display short GNU GPL statement

Options:
    --help			show this help
    --verbose			more verbose operation, mostly for debugging
    --date date			use this as reference date for selected report
    --prevdate date		use this as the previous reference date
    --currency fx		use fx as the home currency
    --restriction sql		impose this SQL restriction
    --extrafx fx1,fx2           additional currencies to load
    --rcfile file		use different configuration file

Examples:
    beancounter addportfolio SUNW:100:USD:401k:joe VOD.L:50:GBP
    beancounter addstock CBOT LNUX RHAT COR.TO
    beancounter backpopulate MSFT SUNW --prevdate 19940101 --date 19983112  
    beancounter dayendreport --restriction \"type = '401k'\"
    beancounter status --date 20000816 --restriction \"currency='USD'\"                 
\n";
  exit 1;
}

sub warranty {
  my $BeanCounterVersion = BeanCounterVersion;
  open (FILE, "< $PROGRAM_NAME");
  my $over = 0;			# have we already had comment lines?
  while (<FILE>) {		# show header
    last if (m/\$Id/);		# quit if we reach the RCS code
    next unless (m/^\#\s+/ or $over);
    $over = 1;			# note the new state
    $ARG =~ s/^\#//;		# minus the leading '#'
    print STDERR $ARG;
  }
  close(FILE);
  print STDERR "   beancounter version $version ($BeanCounterVersion) as of $date\n\n";
}

sub build_lines {
  my $len = shift;
  my $tl = "=" x $len;		# thick line
  my $fl = "-" x $len;		# fine line
  return ($tl,$fl);
}

sub display_report {
  my ($pretty_date, $pretty_prev_date, $prices, $prev_prices,
      $fx_prices, $prev_fx_prices, $shares, $fx, $pricedate) = @_;
  my ($tl,$fl) = build_lines(79);

  print "$tl\n" . "Profit / loss\t\t from $pretty_prev_date" .
    "\tto $pretty_date  abs, rel change" . "\n$fl\n";
  my (%value, %value_prev);
  foreach my $key (sort keys %$shares) {
    my ($name,$count) = split /:/, $key;
    if (Date_Cmp($pricedate->{$name}, $Config{lastbizday}) != 0) {
      $value{$name} += $shares->{$key} * $prices->{$name} 
	* $fx_prices->{$fx->{$name}} / $fx_prices->{$Config{currency}};
      $value_prev{$name} += $shares->{$key} * $prices->{$name} 
	* $fx_prices->{$fx->{$name}}/$fx_prices->{$Config{currency}};
    } else {
      $value{$name} += $shares->{$key} * $prices->{$name} 
	* $fx_prices->{$fx->{$name}} / $fx_prices->{$Config{currency}};
      $value_prev{$name} += $shares->{$key} * $prev_prices->{$name} 
	* $prev_fx_prices->{$fx->{$name}}/$prev_fx_prices->{$Config{currency}};
    }
  }
  my ($assets, $assets_prev) = (0,0);
  foreach my $name (sort keys %value) {
    my $value = $value{$name};
    my $value_prev = $value_prev{$name};
    if (Date_Cmp($pricedate->{$name}, $Config{lastbizday}) != 0) {
      printf("%*s  %3s %19s  %10.2f %8.2f\n", 
	     -16, substr($name,0,16), $fx->{$name}, 
	     " (from $pricedate->{$name})",
	     $value, $prices->{$name}); 
    }else {
      printf("%*s  %3s %10.2f %8.2f  %10.2f %8.2f %8.2f %6.2f%%\n", 
	     -16, substr($name,0,16), $fx->{$name}, 
	     $value_prev, $prev_prices->{$name},
	     $value, $prices->{$name}, 
	     $value-$value_prev, 100*($value/$value_prev-1)); 
    }
    $assets += $value;
    $assets_prev += $value_prev;
  }
  print "$fl\n";
  printf("%-16s  %3s %10.2f           %10.2f      %12.2f %6.2f%%\n", 
	 "Grand Total",  $Config{currency}, $assets_prev, $assets, 
	 $assets-$assets_prev, 100*($assets/$assets_prev-1));
  print "$tl\n";
}


sub display_status {
  my ($pretty_date, $prices, $pricedates, $fx_prices, $shares, $fx,
      $cost, $pdate) = @_;

  my ($tl,$fl) = build_lines(78);
  print "$tl\n" . "\t\t\tPortfolio Status on $pretty_date\n$fl\n";
  printf("%*s %6s %12s %17s %12s %10s\n%s\n",
	 -16, "Name", "Shares", "Close", "Position", "Held", 
	 "Return", $fl);
  my (%value, %totalshares);
  foreach my $key (sort keys %$shares) {
    my ($name,$count) = split /:/, $key;
    $value{$name} += $shares->{$key} * $prices->{$name} 
      * $fx_prices->{$fx->{$name}} / $fx_prices->{$Config{currency}};
    $totalshares{$name} += $shares->{$key};
  }
  my $assets = 0;
  foreach my $name (sort keys %value) {
    my $value = $value{$name};
    my ($daysheld,$annret) = ("", "");
    if (defined($pdate->{$name})) { # if we have a purchase date
      $daysheld = Delta_Format(DateCalc($pdate->{$name}, $Config{today}, 
					undef, 2), 0, "%dt");
      $annret = ($prices->{$name} / $cost->{$name} - 1) * 36500 / $daysheld
	if (defined($cost->{$name}) and $daysheld > 1);
    }
    printf("%*s %6d    %3s %8.2f    %3s %10.2f   %s %s\n", 
	   -16, substr($name,0,16), 
	   $totalshares{$name},  
	   $fx->{$name}, 
	   $prices->{$name},
	   $Config{currency}, 
	   $value,
	   $daysheld ? sprintf("%4d days", $daysheld) : $daysheld, 
	   $annret   ? sprintf("%7.1f%%", $annret) : $annret);
    $assets += $value;
  }
  print "$fl\n";
  printf("%-16s %29s %10.2f \n", 
	 "Grand Total",  $Config{currency}, $assets);
  print "$tl\n";

}

sub day_end_report {
  my $res = shift;

  # day-end report is always relative to the previous day
  # so we enforce a previous date of 24 hrs before the given date
  $prevdatearg = UnixDate(DateCalc("$datearg", "- 24hours"), "%Y%m%d");

  my ($date, $prev_date, $pretty_date, $pretty_prev_date) 
    = GetTodaysAndPreviousDates();

  my ($fx, $prices, $prev_prices, $shares, $pricedate) 
    = GetPriceData($dbh,$date,$res);

  $fx->{'home currency'} = $Config{currency};

  my ($fx_prices, $prev_fx_prices) = GetFXData($dbh, $date, $fx);
  display_report($pretty_date, $pretty_prev_date, $prices, $prev_prices,
		 $fx_prices, $prev_fx_prices, $shares, $fx, $pricedate);
}

sub portfolio_status {
  my $res = shift;

  my ($date, $prev_date) = GetTodaysAndPreviousDates();
  # override with optional dates, if supplied
  $date      = UnixDate(ParseDate($datearg),    "%Y%m%d") if ($datearg); 
  # create 'prettier' non-ISO 8601 form
  my $pretty_date = UnixDate(ParseDate($date), "%d %b %Y");

  my ($fx, $prices, $prev_prices, $shares, $pricedates, $cost, $pdate) = 
    GetPriceData($dbh,$date,$res);

  $fx->{'home currency'} = $Config{currency};
  my ($fx_prices)      = GetFXData($dbh, $date, $fx);

  display_status($pretty_date, $prices, $pricedates,
		 $fx_prices, $shares, $fx, $cost, $pdate);
}

# portfolio_report -- with two "free" dates, ie from last month to last week
sub portfolio_report {
  my $res = shift;

  ## need to do a sanity check on the date
  unless (Date_Cmp(ParseDate($prevdatearg), ParseDate($datearg)) < 0) {
    carp "Error: Date $prevdatearg note prior to date $datearg";
  }

  my ($date, $prev_date, $pretty_date, $pretty_prev_date) 
    = GetTodaysAndPreviousDates();

  my ($fx, $prices, $tmp1, $shares, $pricedate) = 
    GetPriceData($dbh,$date,$res);
  my ($tmp2, $prev_prices, $tmp3, $tmp4, $prev_pricedate) = 
    GetPriceData($dbh,$prev_date,$res);

  $fx->{'home currency'} = $Config{currency};
  my ($fx_prices)      = GetFXData($dbh, $date, $fx);
  my ($prev_fx_prices) = GetFXData($dbh, $prev_date, $fx);

  display_report($pretty_date, $pretty_prev_date, $prices, $prev_prices,
		 $fx_prices, $prev_fx_prices, $shares, $fx, $pricedate,
		 $prev_pricedate);
}


sub portfolio_update {
  my $res = shift;
  UpdateFXDatabase($dbh, $res); # update db with empty constraint
  UpdateDatabase($dbh, $res);	# update db
}


sub backpopulate {
  my @arg = @_;
  my $fromdate = 19990101;	# default to start in Jan of 1999
  my $todate = UnixDate(ParseDate("yesterday"),"%Y%m%d");

  $fromdate = UnixDate(ParseDate($prevdatearg),"%Y%m%d") if ($prevdatearg); 
  $todate   = UnixDate(ParseDate($datearg),"%Y%m%d") if ($datearg); 

  foreach my $symbol (@arg) {
    # we need to query the DB to see if this symbol was registered
    my $stmt = qq{ select symbol from stockinfo where symbol = ? };
    my $sth = $dbh->prepare($stmt);
    my $rv = $sth->execute($symbol);
    while (my $r = $sth->fetch) {
      print "   adding $r->[0] from $fromdate to $todate\n";
      my @arr = GetHistoricalData($r->[0], $fromdate, $todate);
      PrintHistoricalData($r->[0], @arr) if $Config{verbose};
      DatabaseHistoricalData($dbh, $r->[0], @arr);
    }
    $sth->finish;
  }
}


sub quote {
  my @arg = @_;
  my @data = GetDailyData(@arg); 	# fetch data 
  my %data = ParseDailyData(@data); 	# fill assoc. array
  ReportDailyData(%data);		# report data
}


sub add_index {
  my @arg = @_;
  my $index = shift @arg;	# get the index argument
  foreach my $arg (@arg) {	# and loop over the stocks
    my $cmd = "insert into indices values ( '$arg', '$index' );";
    print "$cmd\n" if $Config{verbose};
    $dbh->do($cmd) or carp "\nFailed with $cmd";
  }
}


sub add_stock {
  my @arg = @_;
  my @data = GetDailyData(@arg);
  my %data = ParseDailyData(@data);
  ReportDailyData(%data) if $Config{verbose};
  DatabaseInfoData($dbh, %data);
  DatabaseDailyData($dbh, %data);
}


sub add_portfolio {
  my @arg = @_;

  # statement for insertion into portfolio
  my $stmt = qq{insert into portfolio values ( ?, ?, ?, ?, ?, ?, ? );};
  my $sth = $dbh->prepare($stmt);

  # statement to check if this symbol already in info
  my $infostmt = qq{ select symbol from stockinfo where symbol = ? };
  my $infosth = $dbh->prepare($infostmt);

  my @symbol;

  foreach my $arg (@arg) {	# and loop over the stocks
    my ($stock,$nb,$fx,$type,$owner,$cost,$date) 
      = (undef, undef, undef, undef, undef);
    print "Inserting $arg\n" if $Config{verbose};
    ($stock,$nb,$fx,$type,$owner,$cost,$date) = split /:/, $arg;
    $fx = $Config{currency} unless defined($fx); 
    if (defined($stock) and defined($nb)) {
      $sth->execute($stock, $nb, $fx, $type, $owner, $cost, $date);
    } else {
      carp "Ignoring invalid argument $arg";
    }

    $infosth->execute($stock);
    push @symbol, $stock unless ($infosth->fetch);

  }
  $sth->finish;
  $infosth->finish;

  add_stock(@symbol)		# make sure 'new' stocks get added to DB
}


sub delete_stock {
  my @arg = @_;

  foreach my $arg (@arg) {	# and loop over the stocks
    foreach my $table (qw/ stockinfo stockprices indices portfolio/) {
      my $cmd = "delete from $table where symbol = '$arg';";
      print "$cmd\n" if $Config{verbose};
      $dbh->do($cmd) or carp "\nFailed with $cmd";
    }
  }
}


sub deletedb {
  system("destroydb beancounter") == 0 or croak "Could not destroy database";
}


__END__				# that's it, folks!  Documentation below

#---- Documentation ---------------------------------------------------------

=head1 NAME

beancounter - Stock portfolio performance monitor tool

=head1 SYNOPSYS

beancounter [options] command [command_arguments ...]

=head1 COMMANDS

 addindex index args       add stock(s) to market index 'indx'
 addportfolio sym:nb:fx:type:o:pp:pd ... 
                           add 'nb' stocks of company with symbol 'sym'
                           that are listed in currency 'fx' to the 
			   portfolio with optional 'type' and 'owner'
                           info, purchase price 'pp' and date 'pd'; 
                           see below for a complete example
 addstock arg ...          add stock(s) with symbol arg to the database
 backpopulate  arg ...	   fill with historic data for given stock(s)
 dailyjob		   combines 'update' and 'dayendreport' 
 dayendreport		   combines 'update' and 'plreport' 
 deletestock arg ...	   delete stock(s) from database
 destroydb                 delete the BeanCounter database
 plreport                  run an end-of-day portfolio report
 quote arg ...             report current data for given stock(s)
 status			   status summary report for portfolio
 update                    update the database with day's data
 warranty		   display the short GNU GPL statement

=head1 OPTIONS

 --help                    show this help
 --verbose		   more verbose operation, debugging
 --date date               report for this date (today)
 --prevdate date           relative to this date (yesterday)
 --currency fx		   set home currency
 --restriction sql	   impose SQL restriction
 --extrafx fx1,fx2,...     additional currencies to load
 --rcfile file		   use different configuration file

=head1 DESCRIPTION

B<beancounter> analyses stock market data to evaluate portfolio
performance.  It has several modes of operation. The first main mode
is data gathering: both current data (e.g. end-of-day closing prices)
and historical price data (to back-populate the database) can be
automatically retrieved and stored in a relational database (which is
developed on PostgreSQL but should be easily portable to other
database systems thanks to the Perl DBI layer). The second main mode
is data analysis where the stored data is evaluated to provide
performance information.

Data is retrieved from the Yahoo! Finance web sites with support for
North America (i.e. US and Canada), Europe (for the Continent as well
as Great Britain), several Asian stock markets, Australia and New
Zealand. New markets are easy to add by following the (fairly
extensively commented) Perl code. Patches are welcome!

B<beancounter> can aggregate the change in value for the entire
portfolio over arbitrary time horizons. Using the powerful
date-parsing routine available to Perl, you can simply say 'from six
months ago to today' (see below for examples).

B<beancounter> has been written and tested under Linux. It should run
under any standard Unix as long as the required Perl modules are
installed, as as long as the DB (currently only tested with
PostgreSQL) is found.

=head1 EXAMPLES

 beancounter addportfolio SUNW:100:USD:joe:401k:85.50:19991117 \
                          IBM:100:USD:joe:401k:90.25:20000320  \
                          SPY:50:USD:joe:ira:142.25:20000620

    This adds the two stocks Sun and IBM to the 401k portfolio of Joe,
    as well as SP500 'Spiders' to his IRA portfolio. The stocks are
    also added to the general stock info tables. 

 beancounter addstock LNUX RHAT COR.TO

    This adds these three Linux companies to the database without adding
    them to any specific portfolios.

 beancounter backpopulate --prevdate '1 year ago' \
                          --date 'friday 1 week ago' IBM SUNW HWP

    This backpopulates the database with historic prices for three
    hardware companies. Note how the date specification is very general.
 
 beancounter plreport --prevdate '1 month ago' --date 'today' \
			--restriction "owner='joe'"

    This calculates portfolio profits or losses over the last year. It
    also imposes the database restriction that only stocks owned by
    'joe' are to be included.

 beancounter status --restriction "type='401k'"

    This shows a portfolio status report with the restriction that only
    stocks from the '401k' account are to be included.

=head1 TUTORIAL

The following few paragraphs will illustrate the use of
B<beancounter>.  We will set up two fictional accounts for two
brothers Bob and Bill (so that we can illustrate the 'owner' column).
The prices below are completely ficticious, as are the portfolios.

We suppose that B<beancounter> is installed and that the
'setup_beancounter' command has been run. We can then create a
two-stock (computer hardware) portfolio for Bob as follows:

 beancounter addportfolio SUNW:100:USD:bob:401k:85.50:19991117 \
                          IBM:100:USD:bob:401k:90.25:20000320

Here we specify that 100 shares each of Sun and IBM, priced in US
Dollars, are in Bob's portfolio which is tagged as a 401k retirement
account. The (fictious) purchase price and date are also given.

Let's suppose that Bill prefers networking equipment, and that he has
a brokerage account in Canada:

 beancounter addportfolio CSCO:100:USD:bill:spec:78.00:19990817 \
                          NT:200:CAD:bill:spec:cad:90.25:20000212

Now we can backpopulate the database from 1998 onwards for all four stocks:

 beancounter backpopulate --prevdate 19980101 CSCO IBM NT SUNW

With this historical data in place, we now compare how Bob's portfolio
would have fared over the last 18 months:

 beancounter plreport --prevdate '18 months ago' --restriction "owner='bob'"

Note how we use double quotes to protect the arguments, and how the
SQL restriction contains a further single quote around the literal
string.

We can also review the performance for Bill at the most recent trading
day:

 beancounter dayendreport --restriction "owner='bill'"

or the status of holdings and their respective values:

 beancounter dayendreport --restriction "owner='bill'"

=head1 MORE DETAILED COMMAND DESCRIPTION

B<addportfolio> is the most important 'position entry' command. As
with other commands, several arguments can be given at the same
time. For each of these, records are separated using a colon and
specify, in order, stock symbol, number of stocks held, currency,
account type, account owner, purchase price and purchase date.  Only
the first three arguments are required, the others are
optional. Executing B<addportfolio> implicitly executes B<addstock>. 
The account type column can be used to specify whether the account 
is, e.g., a tax-sheltered retirement account, or it could be used to
denote the brokerage company is it held at.

B<plreport> retrieves the most recent quotes(s). This is useful for
illiquid securities which might not have traded that day, or if a
public holiday occurred, or if there was a data error at Yahoo!. Two
dates can be specified which determine the period over which the
profit or loss is computed. This will fail if price data (or currency
data in the case of foreign stocks data) data is not available for
either of those two dates. This can be restrictive for foreign stocks
where we cannot backpopulate due to lack of public data source for
historical currency quotes.

B<dayendreport> is similar to B<plreport> but is always over a one-day
period.  It also uses only one date record by calculating performance
given the 'previous close' data.

B<status> shows holdings amounts, total position values, annualized 
returns in percentages and holding periods in days. Note that the 
annualized returns can appear excessive if, e.g., a ten-day return 
from a recently purchased stock is extrapolated to an annual time 
period.

B<addindex> adds stocks a the index table. Currently, no further
analysis references this table.

B<addstock> adds stocks to the database. From then on data will be
retrieved for the given symbol(s) and stored in the database whenever 
the B<update> command is executed.

B<addpopulate> fills the database with historic prices for the given
symbols and date period. Note that this works for stocks only, but not
for currencies due to the lack of a public source of historical FX
prices.

B<quote> simply shows a price quote  for the given symbol(s).

B<update> updates the database with quotes for all stocks for the 
given day. No output is generated making the command suitable for 
B<cron> execution.

B<dailyjob> is a simple wrapper around B<update> and B<dayendreport>.

B<deletestock> removes the given symbols from the database.

B<destroydb> deletes the BeanCounter database.

B<warranty> display a short GNU General Public License statement.

=head1 MORE DETAILED OPTION DESCRIPTION

B<--currency> can be used to select a different I<home> currency. 
Instead of having all values converted to the default currency, the
selected currency is used.

B<--date> allows to choose a different reference date. This is then be
be used by commands working on a date, or date period, such as
B<plreport>, B<dayendreport>, B<backpopulate> or
B<status>. B<--prevdate> allows to choose a different start date for
return calculations, or data gathering.

B<--restriction> can be used to restrict the database selection. The
argument must be a valid part of valid SQL statement in the sense that
existing columns and operators have to be employed. The argument to
this option will be completed with a leading I<and>. The SQL
restriction will typcally be over elements of the I<portfolio> table
which comprises the columns I<symbol>, I<shares>, I<currency>,
I<type>, I<owner>, I<cost> and I<date>. A simple example would be
I<currency='CAD'>. Note that this has to protected by double quotes
I<"I> on the command-line.

B<--extrafx> allows to gather data on additional currency rates beyond
those automatically selected as shares are listed in them. A typical
example would be for a European investor wanting to convert from the
EUR in which the shares are listed into one of the member currencies
which B<beancounter> would no longer retrieve as shares are no longer
listed in these.

B<--rcfile> allows to specify a resource file different from the
default I<~/.beancounterrc>. 

The B<--verbose> and B<--debug> switches can be used in debugging an
testing, and B<--help> triggers the display of help message. 


=head1 BUGS

B<Finance::BeanCounter> and B<beancounter> are so fresh that there are
only missing features :) Seriously, check the TODO list. This code or
its predecessors have been used by the author since the end of 1998.

There might be issues with Perl 5.6 and PostgreSQL 7.* which have yet
to be installed on the machines the author is running B<beancounter>
on.

=head1 SEE ALSO

F<Finance::BeanCounter.3pm>, F<smtm.1>, F<Finance::YahooQuote.3pm>,
F<LWP.3pm>, F<Date::Manip.3pm>

=head1 COPYRIGHT

beancounter is (c) 2000 by Dirk Eddelbuettel <edd@debian.org>

Updates to this program might appear at 
F<http://rosebud.sps.queensu.ca/~edd/code/beancounter.html>.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.  There is NO warranty whatsoever.

The information that you obtain with this program may be copyrighted
by Yahoo! Inc., and is governed by their usage license.  See
F<http://www.yahoo.com/docs/info/gen_disclaimer.html> for more
information.

=head1 ACKNOWLEDGEMENTS

The Finance::YahooQuote module by Dj Padzensky (on the web at
F<http://www.padz.net/~djpadz/YahooQuote/>) served as the backbone for
data retrieval, and a guideline for the extension to the non-North
American quotes which was already very useful for the real-time ticker 
F<http://rosebud.sps.queensu.ca/~edd/code/smtm.html>.

=cut


